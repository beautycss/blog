[{"title":"Linux下安装n来管理多版本NodeJS","date":"2018-02-21T16:00:00.000Z","path":"2018/02/22/install-n-to-manage-nodejs-in-linux/","text":"在linux环境下已经安装了nodejs的情况下，需要升级或使用其它版本的nodejs，这时需要使用工具n来管理。 安装步骤：1. 已经安装了nodejs环境;2. 全局安装n；1npm install -g n 3. 输入命令n来查看是否安装成功，成功的话会出来命令提示列表；1n 4. 安装新版的nodejs，\b这里以安装9.2.0版本为例；1n 9.2.0 5. 查看新安装的node版本和npm版本\b；12node -vnpm -v 6. 如果显示的版本为新的版本，说明安装成功。错误1及解决步骤：如果执行 node -v 显示的版本仍为旧版，说明node安装目录和n的默认路径不一致，需要把n的路径设置为当前node的目录； 1. 先获取当前的node安装目录。1which node 比如获取到的是 /usr/local/node。如果获取到的路径是 /usr/local/bin/node，说明之前安装的node使用了软链，需要找到当前node的安装目录，例如/usr/local/node。 2. 打开环境配置文件；1vim ~/.bash_profile 3. 修改环境配置文件并保存；12export N_PREFIX=/usr/local/node #当前node的安装目录export PATH=$N_PREFIX/bin:$PATH 4. 执行source使修改生效；1source ~/.bash_profile 错误2及解决步骤：如果出现 n: command not found 的错误，说明除了要解决路径不一致的问题，还要建立一个软链。 1. 执行上面修改路径的4步。2. 找到n的安装目录，建立软链；1ln -s /usr/local/node/lib/node_modules/n/bin/n /usr/local/bin/n","tags":[{"name":"nodejs","slug":"nodejs","permalink":"http://hanhan.pro/tags/nodejs/"}]},{"title":"Linux下安装NodeJS","date":"2017-10-31T16:00:00.000Z","path":"2017/11/01/install-nodejs-in-linux/","text":"1. 推荐在 淘宝镜像 下载 node-v8.9.0-linux-x64.tar.gz ，并上传到服务器的 /usr/local 目录下;我这里以8.9.0版本为例，且使用的linux服务器为64位的。 2. 在终端进入到服务器的 /usr/local 目录下，运行以下命令解压文件（或ftp工具解压也可以）；1tar zxf node-v8.9.0-linux-x64.tar.gz 3. 重命名文件夹，我这里改名为node，也可以使用ftp工具直接重命名；1mv node-v8.9.0-linux-x64 node 4. 进入node/bin目录下看看是否有node及npm两个文件，没有的话重新解压看看；1cd node/bin 5. 建立软链；12ln -s /usr/local/node/bin/node /usr/local/bin/nodeln -s /usr/local/node/bin/npm /usr/local/bin/npm 这样就可以将nodejs设置为全局访问了。 6. 查看node及npm版本号，有的话则安装成功；12node -vnpm -v 7. 附上查看linux版本的命令。1cat /proc/version","tags":[{"name":"nodejs","slug":"nodejs","permalink":"http://hanhan.pro/tags/nodejs/"}]},{"title":"在Windows下使用NVM安装NodeJS","date":"2017-10-29T16:00:00.000Z","path":"2017/10/30/using-nvm-install-nodejs-in-windows/","text":"如果要在同一台电脑上安装不同版本的nodejs来使用，需要用到nvm。 1. 下载nvm安装包并安装，安装路径可自行设置。2. 打开你的nvm安装目录，安装nvm时设置的安装路径，以下为默认路径。1C:\\Users\\Administrator\\AppData\\Roaming\\nvm 3. 运行install.cmd，命令行里会提示安装路径，复制粘贴你的nvm安装路径即可。 4. 运行完成后，nvm目录下多了一个setting.txt文件，为nvm配置文件。5. 打开文件setting.txt，添加以下代码：12node_mirror: http://npm.taobao.org/mirrors/node/ npm_mirror: https://npm.taobao.org/mirrors/npm/ 以上代码设置了镜像为国内，以便快速成功的安装nodejs。 6. 安装nodejs，如果需指定nodejs位数需要在后面加，我这里根据需要安装的是32位，版本是8.3.0：1nvm install 8.3.0 32 这里指定了安装32位的nodejs，不指定则默认安装64位的。 7. 安装好nodejs后，会提示用使用use来启动这个版本，输入以下命令来启用：1nvm use 8.3.0 32 使用use时也要带上安装的位数：32。 8. 可以输入命令来查看使用的nodejs和npm版本，如果显示出来版本号表示该nodejs安装成功：12node -vnpm -v 9. 为了便于快速安装npm模块，可以在用户目录建一个.npmrc文件，添加以下代码：1registry=https://registry.npm.taobao.org 该文件一般是在你的用户目录下，比如C:\\Users\\YourUsername下面。该配置设置了npm的源为淘宝的源，解决了默认访问官方的国外源慢的问题。","tags":[{"name":"nodejs","slug":"nodejs","permalink":"http://hanhan.pro/tags/nodejs/"}]},{"title":"VSCode之Mac OS常用快捷键整理","date":"2017-09-01T16:00:00.000Z","path":"2017/09/02/vscode-shortcuts-macos/","text":"分享一下我整理出来的Mac OS下常用VSCode快捷键，以便大家更快速的进行编码开发。 代码操作：12345删除光标所在行：CMD+X上移光标所在行：Alt+Up下移光标所在行：Alt+Down向上复制光标所在行：Alt+Shift+Up向下复制光标所在行：Alt+Shift+Down 光标相关：123456789移到文件开头：CMD+Up移到文件结尾：CMD+Down移到本行最左侧：CMD+Left移到本行最右侧：CMD+Right选中当前行：CMD+I连续选中多行：连续按CMD+I选中光标处单词：CMD+D连续选中多个相同单词：连续按CMD+D一次选中多个相同单词：CMD+Shift+L 官方快捷键列表： 官方提供的快捷键列表，但是是英文的。 也可以点击帮助菜单下面的快捷键参考，可以看到全部快捷键列表。","tags":[{"name":"前端工具","slug":"前端工具","permalink":"http://hanhan.pro/tags/前端工具/"},{"name":"vscode","slug":"vscode","permalink":"http://hanhan.pro/tags/vscode/"}]},{"title":"Electron之在Windows下使用原生NodeJS模块","date":"2017-08-04T16:00:00.000Z","path":"2017/08/05/using-native-node-modules-in-electron-windows/","text":"需要使用 ffi 和 ref 两个模块来读取DLL文件。 1. 修改npm配置文件.npmrc，添加以下代码，以便安装electron；1234registry=https://registry.npm.taobao.orgsass_binary_site=https://npm.taobao.org/mirrors/node-sass/phantomjs_cdnurl=http://npm.taobao.org/mirrors/phantomjsELECTRON_MIRROR=http://npm.taobao.org/mirrors/electron/ 该文件一般是在你的用户目录下，比如C:\\Users\\YourUsername下面。如果没有，就新建这个文件。以上代码设置了npm的源以及electron的镜像，设置electron镜像为国内，才能快速成功的安装electron。 2. 全局安装electron；1npm install electron -g 建议全局安装Electron。 1npm install --arch=ia32 electron -g 如果需要安装32位，则使用--arch=ia32。 3. 全局安装electron-packager，electron打包用；1npm install electron-packager -g 4. 全局安装electron-rebuild，之后编译用；1npm install --save-dev electron-rebuild -g 为了方便我这里是全局安装。 5. 命令行工具进入electron根目录，安装ffi 和 ref 两个模块；12npm install ffinpm install ref 6. 在electron根目录下运行electron-rebuild，以编译依赖的模块；1electron-rebuild 7. electron根目录下的package.json里面打包配置，需要设置为64位的，否则调用NodeJS模块报错；1&quot;build&quot; : &quot;electron-packager ./projectFolder newFolder --overwrite --platform=win32 --arch=x64 --out=dist --icon=projectFolder/icon.ico --electron-version=1.7.5&quot; 8. 运行打包后，需拷贝根目录的node_modules文件夹到生成的app下的resources目录下；9. 拷贝根目录下的main.js到生成的app下的resources目录下；10. 运行生成好的app，正常调用表示成功。","tags":[{"name":"electron","slug":"electron","permalink":"http://hanhan.pro/tags/electron/"}]},{"title":"react native之IOS端打包","date":"2017-05-01T16:00:00.000Z","path":"2017/05/02/react-native-ios-bundle/","text":"1. 进入你的react native工程目录：1cd /Users/xiaoming/rnApp 2. 运行以下代码生成bundle文件，生成的目录和名字可以自定义，以下代码生成文件到 ios目录下，名字叫 rnApp.bundle：1react-native bundle --entry-file index.ios.js --platform ios --bundle-output ios/rnApp.bundle 3. 在Xcode里左侧的项目文件夹，右键 Add Files to... ，将刚才生成的两个文件添加到工程里。4. 在Xcode里打开 AppDelegate.m 文件，找到代码 jsCodeLocation = [[RCTBundleURLProvider sharedSettings]，在其下方添加以下代码 ：1jsCodeLocation = [[NSBundle mainBundle] URLForResource:@&quot;rnApp&quot; withExtension:@&quot;bundle&quot;]; 注意：代码里的 @&quot;rnApp&quot; 和 @&quot;bundle&quot;，与之前生成的文件 rnApp.bundle 对应。 5. 在Xcode里点击运行，使用模拟器测试app能否正常运行。","tags":[{"name":"React Native","slug":"React-Native","permalink":"http://hanhan.pro/tags/React-Native/"}]},{"title":"react native之IOS端开发笔记","date":"2017-03-05T16:00:00.000Z","path":"2017/03/06/react-native-ios-development-notes/","text":"建议使用或升级到0.4.0版本。版本升级：1react-native upgrade 0.4.0及以上版本的RN插件安装：1react-native link 此命令给所有已安装的native插件链接原生依赖 允许访问网络：在Xcode中打开IOS工程的Info.plist文件，在 App Transport Security Settings 下添加 Allow Arbitrary Loads 属性，值为 true12Allow Arbitrary Loadstrue 允许访问相机：在Xcode中打开IOS工程的Info.plist文件，在最下添加 Privacy - Camera Usage Description 属性，值可以填获取相机权限的提示信息，也可以为空1Privacy - Camera Usage Description 允许访问相册库：在Xcode中打开IOS工程的Info.plist文件，在最下添加 Privacy - Photo Library Usage Description 属性，值可以填获取访问相册权限的提示信息，也可以为空1Privacy - Photo Library Usage Description 支持的屏幕方向设置：在Xcode里点击 General 标签， 在 Device Orientation 可以选择app支持的屏幕方向。 启动屏设置： 在Xcode里点击 General 标签， 在 Launch Images Source 填入 LaunchImage，下面的 Launch Screen File 留空： 进入Xcode，点击左侧 Images.xcassets ，然后根据右侧提示的尺寸，做好图片后，对应的拖进去就设置好了启动屏图片。","tags":[{"name":"React Native","slug":"React-Native","permalink":"http://hanhan.pro/tags/React-Native/"}]},{"title":"Centos linux 6.8安装nginx","date":"2017-03-02T16:00:00.000Z","path":"2017/03/03/install-nginx-in-centos-linux-6.8/","text":"1. 在nginx官网下载 1.10.3.tar.gz ，并上传到服务器的 /usr/local 目录下：2. 在终端进入到服务器的 /usr/local 目录下，运行以下命令解压文件（或ftp工具解压也可以）：1tar zxf nginx-1.10.3.tar.gz 3. 安装c++工具和库：1yum install gcc gcc-c++ ncurses-devel perl 4. 安装PCRE库：1yum -y install pcre-devel 5. 安装openssl库：1yum -y install openssl openssl--devel 6. 安装zlib库：1yum install -y zlib-devel 7. 进入解压的目录，并运行以下配置代码：12cd ./nginx-1.10.3./configure --prefix=/usr/local/nginx 8. 编译及安装nginx：12makemake instal 9. 启动nginx命令：1/usr/local/nginx/sbin/nginx 10. 重启nginx命令：1/usr/local/nginx/sbin/nginx -s reload 11. 建立一个软链：1ln -s /usr/local/nginx/sbin/nginx /bin/nginx 之后就可以运行 nginx -s reload 来重启nginx了。","tags":[{"name":"nginx","slug":"nginx","permalink":"http://hanhan.pro/tags/nginx/"}]},{"title":"mac os使用mkdocs生成文档及解决中文搜索问题","date":"2017-01-23T09:00:00.000Z","path":"2017/01/23/use-mkdocs-on-mac/","text":"mkdocs是一款根据markdown文件生成文档站点的工具，用来生成项目的文档说明非常专业和方便，官网地址是：http://www.mkdocs.org/ 安装及使用mkdocs使用mkdocs需要安装python和pip，由于mac os自带了python，因此直接从安装pip开始。 1. 安装pip的简单方法：1sudo easy_install pip 2. 安装 mkdocs 工具：1sudo pip install mkdocs 说明：建议前面加一个sudo，碰到过报错问题使用此方法解决了 3. 查看mkdocs的版本，以检查是否安装成功：1mkdocs --version 4. 用mkdocs生成一个工程：12mkdocs new my-projectcd my-project 5. 终端里输入mkdocs serve，运行刚刚创建的工程：1mkdocs serve 6. 在浏览器中输入 http://127.0.0.1:8000/ 访问：1http://127.0.0.1:8000/ 7. 配置mkdocs：1234567site_name: bootstrap使用文档 # 站点名称及页面标题pages: # 页面列表 - 首页: index.md # 页面标题及左侧显示的名称：对应的md文件 - 起步: start.md # 页面标题及左侧显示的名称：对应的md文件theme: readthedocs # 此主题为蓝灰主题，默认为官方亮蓝色主题 site_dir: api # 生成的文件夹名称，默认为site# extra_css: [extra/extra.css] # 额外的css文件，需要放在docs目录下跟md文件一起 官方主题： readthedocs主题： 7. 终端里输入mkdocs build，生成文档站点：1mkdocs build 生成完的站点包括完整的css,js,fonts,html等文件/目录。 8. 部署文档站点：mkdocs没有提供部署功能，自己可以发布到git站点或自己的空间/主机上去。 解决中文搜索问题由于mkdocs生成json文件时将汉字转成了ascii码字符，且mkdocs使用的搜索插件lunr.js本身不支持中文，因此解决中文搜索问题就是要解决这两个问题。 1. 打开Finder，使用快捷键command+shift+g，输入以下路径，进入mkdocs的目录：1/Library/Python/2.7/site-packages/mkdocs/ 注意系统的python版本，我这使用的是2.7 2. 用代码编辑器打开search.py文件，搜索generate_search_index，修改后的如下：1return json.dumps(page_dicts, sort_keys=True, ensure_ascii=False, indent=4) 添加了ensure_ascii=False, 3. 保存文件，如果权限问题无法保存，就另存到其他目录下，再拷贝覆盖mkdocs目录下的search.py文件；4. 打开github站点 https://github.com/codepiano/lunr.js 下载或克隆该修改版的lunr.js项目到本地；5. 将下载或克隆到本地的lunr.js项目里的lunr.min.js文件，拷贝覆盖到以下目录里的同名文件：1/Library/Python/2.7/site-packages/mkdocs/assets/search/mkdocs/js 此目录仍然为mkdocs工具的目录，覆盖官方工具里的同名文件，以后每次生成站点就直接好用了，也可以先备份官方使用的lunr.min.js文件再覆盖它 6. 进入文档的目录，使用mkdocs build重新生成站点；7. 查看生成好的文档目录下mkdocs/search_index.json文件，确认里面的中文可以正常显示，非ascii码字符，说明修改官方文件成功；8. 将生成好的文档站点上传更新后，清除浏览器缓存，输入中文进行搜索，出来结果即表示成功感谢 让mkdocs支持中文搜索 这篇博文的指点，该博文中提供的修改版lunr.js已经不支持中文，使用上面本文提供的支持中文。","tags":[{"name":"mkdocs","slug":"mkdocs","permalink":"http://hanhan.pro/tags/mkdocs/"},{"name":"markdown","slug":"markdown","permalink":"http://hanhan.pro/tags/markdown/"}]},{"title":"nginx服务器下解决字体跨域的问题","date":"2016-12-24T16:00:00.000Z","path":"2016/12/25/nginx-icon-font-access/","text":"1. 进入 /usr/local/nginx/conf 目录，打开 nginx.conf 文件，1/usr/local/nginx/conf 2. 找到当前使用的server及要修改的域名处，增加以下代码并保存：123location ~* \\.(ttf|otf|eot|woff|woff2)$ &#123; add_header Access-Control-Allow-Origin *;&#125; 3. 在 nginx.conf 文件的同级目录，打开 mime.types 文件并找到以下代码：1application/font-woff woff; 4. 在其上方增加以下代码并保存：123font/ttf ttf;font/otf otf;application/font-woff2 woff2; 5. 重启nginx服务器：1/usr/local/nginx/sbin/nginx -s reload 6. 清除浏览器缓存并查看效果，完成。","tags":[{"name":"nginx","slug":"nginx","permalink":"http://hanhan.pro/tags/nginx/"},{"name":"跨域","slug":"跨域","permalink":"http://hanhan.pro/tags/跨域/"}]}]